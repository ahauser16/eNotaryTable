# This is the header of the migration script. It includes a unique `Revision ID` for this migration, the `Revises` field which would contain the `Revision ID` of the previous migration if one existed, and the `Create Date` when this migration script was generated.

"""empty message

Revision ID: d064aef74b2f
Revises: 
Create Date: 2024-04-27 15:15:00.333820

"""

# These are import statements. `op` provides functions to perform operations like creating or dropping tables, and `sa` (SQLAlchemy) is used to define the types of the columns.
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
# These are Alembic's revision identifiers. 
# `revision` is the unique identifier for this migration. 
# `down_revision` would be the revision of the previous migration if one existed. 
# `branch_labels` and `depends_on` are advanced features not used in this script.
revision = 'd064aef74b2f'
down_revision = None
branch_labels = None
depends_on = None

# The `upgrade()` function is used to apply the migration. In this case, it creates a new table `user_types` with columns `id` and `type`, and adds a new column `user_type_id` to the `users` table. It also creates a unique constraint on the `username` column of the `users` table and a foreign key from `users.user_type_id` to `user_types.id`.
def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('user_types',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('type', sa.String(length=20), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('type')
    )
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.add_column(sa.Column('user_type_id', sa.Integer(), nullable=False)) # Changed nullable to False
        batch_op.create_unique_constraint(None, ['username'])
        batch_op.create_foreign_key(None, 'user_types', ['user_type_id'], ['id'])

    # ### end Alembic commands ###


# The `downgrade()` function is used to undo the migration. It does the opposite of `upgrade()`: it removes the `user_type_id` column from the `users` table, drops the unique constraint and the foreign key, and finally drops the `user_types` table.
def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_constraint(None, type_='unique')
        batch_op.alter_column('user_type_id', existing_type=sa.Integer(), nullable=True)  # Added this line to set nullable back to True
        batch_op.drop_column('user_type_id')

    op.drop_table('user_types')
    # ### end Alembic commands ###
